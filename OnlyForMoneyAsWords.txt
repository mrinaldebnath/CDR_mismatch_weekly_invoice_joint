package com.weeklyInvoice;

import java.text.DecimalFormat;

public class OnlyForMoneyAsWords {
	
	private static final String[] tensNames = {
		    "",
		    " Ten",
		    " Twenty",
		    " Thirty",
		    " Forty",
		    " Fifty",
		    " Sixty",
		    " Seventy",
		    " Eighty",
		    " Ninety"
		  };

		  private static final String[] numNames = {
		    "",
		    " One",
		    " Two",
		    " Three",
		    " Four",
		    " Five",
		    " Six",
		    " Seven",
		    " Eight",
		    " Nine",
		    " Ten",
		    " Eleven",
		    " Twelve",
		    " Thirteen",
		    " Fourteen",
		    " Fifteen",
		    " Sixteen",
		    " Seventeen",
		    " Eighteen",
		    " Nineteen"
		  };

		  public OnlyForMoneyAsWords() {}

		  private static String convertLessThanOneThousand(int number) {
		    String soFar;

		    if (number % 100 < 20){
		      soFar = numNames[number % 100];
		      number /= 100;
		    }
		    else {
		      soFar = numNames[number % 10];
		      number /= 10;

		      soFar = tensNames[number % 10] + soFar;
		      number /= 10;
		    }
		    if (number == 0) return soFar;
		    return numNames[number] + " Hundred" + soFar;
		  }


		  public static String convert(long number) {
		    // 0 to 999 999 999 999
		    if (number == 0) { return "Zero"; }

		    String snumber = Long.toString(number);

		    // pad with "0"
		    String mask = "0000000000";
		    DecimalFormat df = new DecimalFormat(mask);
		    snumber = df.format(number);

		    // XXXnnnnnnnnn
		    int crores = Integer.parseInt(snumber.substring(0,3));
		    // nnnXXXnnnnnn
		    int lacs  = Integer.parseInt(snumber.substring(3,5));
		    // nnnnnnXXXnnn
		    int hundredThousands = Integer.parseInt(snumber.substring(5,7));
		    // nnnnnnnnnXXX
		    int thousands = Integer.parseInt(snumber.substring(7,10));

		    String tradBillions;
		    switch (crores) {
		    case 0:
		      tradBillions = "";
		      break;
		    case 1 :
		      tradBillions = convertLessThanOneThousand(crores)
		      + " Crore ";
		      break;
		    default :
		      tradBillions = convertLessThanOneThousand(crores)
		      + " Crores ";
		    }
		    String result =  tradBillions;

		    String tradMillions;
		    switch (lacs) {
		    case 0:
		      tradMillions = "";
		      break;
		    case 1 :
		      tradMillions = convertLessThanOneThousand(lacs)
		         + " Lac ";
		      break;
		    default :
		      tradMillions = convertLessThanOneThousand(lacs)
		         + " Lacs ";
		    }
		    result =  result + tradMillions;

		    String tradHundredThousands;
		    switch (hundredThousands) {
		    case 0:
		      tradHundredThousands = "";
		      break;
		    case 1 :
		      tradHundredThousands = "One Thousand ";
		      break;
		    default :
		      tradHundredThousands = convertLessThanOneThousand(hundredThousands)
		         + " Thousands ";
		    }
		    result =  result + tradHundredThousands;

		    String tradThousand;
		    tradThousand = convertLessThanOneThousand(thousands);
		    result =  result + tradThousand;

		    // remove extra spaces!
		    return result.replaceAll("^\\s+", "").replaceAll("\\b\\s{2,}\\b", " ");
		  }
	

}
