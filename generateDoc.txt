package com.weeklyInvoice;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFClientAnchor;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFPatriarch;
import org.apache.poi.hssf.usermodel.HSSFPicture;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.util.IOUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import pl.allegro.finance.tradukisto.MoneyConverters;

public class GenerateDoc {
	
	static String carrierName;
	static int discountIvoco;
	static String startDateFinalString;
	static String endDateFinalString;
	static FileOutputStream outStream;
	static InputStream inStream;
	static InputStream CDR_SOA_Instream;
	static Map<String, String> addressMap;
	
	public static String[] ones = { 
			  "", "One", "Two", "Three", "Four", 
			  "Five", "Six", "Seven", "Eight", 
			  "Nine", "Ten", "Eleven", "Twelve", 
			  "Thirteen", "Fourteen", "Fifteen", 
			  "Sixteen", "Seventeen", "Eighteen", 
			  "Nineteen"
			};
			 
			public static String[] tens = {
			  "",          // 0
			  "",          // 1
			  "Twenty",    // 2
			  "Thirty",    // 3
			  "Forty",     // 4
			  "Fifty",     // 5
			  "Sixty",     // 6
			  "Seventy",   // 7
			  "Eighty",    // 8
			  "Ninety"     // 9
			};
			
			public static String convert(long n)
			{
				if (n < 20) {
				    return ones[(int) n];
				}
				
				else if (n < 100) {
				    return tens[(int) n / 10] 
				      + ((n % 10 != 0) ? " " : "") 
				      + ones[(int) n % 10];
				}
				
				if (n < 1000000) {
				    return convert(n / 1000) + " thousand" + ((n % 1000 != 0) ? " " : "") 
				      + convert(n % 1000);
				}
				return "";
			}
			
			
			public static String getMoneyIntoWords(double money) {
			    long dollars = (long) money;
			    long cents = Math.round((money - dollars) * 100);
			    if (money == 0D) {
			        return "";
			    }
			    if (money < 0) {
			        return "INVALID_INPUT_GIVEN";
			    }
			    String dollarsPart = "";
			    if (dollars > 0) {
			        dollarsPart = "USD "+convert(dollars);
			    }
			    String centsPart = "";
			    if (cents > 0) {
			        if (dollarsPart.length() > 0) {
			            centsPart = " and ";
			        }
			        centsPart += convert(cents) + " Cent" + (cents == 1 ? "" : "s")+" Only";
			    }
			    return dollarsPart + centsPart;
			}
	
	
public static void setDate() {
		
	addressMap = new HashMap<String, String>();
		discountIvoco=0;
			File yearDir = new File("C:\\Users\\Omnia\\Google Drive\\Invoice\\Invoice " + carrierName + " (1)\\Invoice "
					+ carrierName + " 2018");

			File[] listOfYearlyFiles = yearDir.listFiles();
			int numberInsideYear = listOfYearlyFiles.length;
			Date tempForLastDate = new Date(117, 11, 31);
			int tempforLastIndex = 0;

			for (int yearIndex = 0; yearIndex < numberInsideYear; yearIndex++) {

				File fileToCheck = listOfYearlyFiles[yearIndex];
				String fileName = fileToCheck.getName();

				if (!fileName.equals("TrackDate.txt"))
					continue;

				String content=null;

				try {
					content = new String(Files.readAllBytes(Paths.get(fileToCheck.getAbsolutePath())));
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				startDateFinalString=content.substring(0, content.indexOf("-"));
				endDateFinalString=content.substring(content.indexOf("-")+1);
			}
	}


public static void setInOutLastDate() throws IOException{
	
	addressMap.put("Carrier-1", "Apartment - 1C, 1st floor,\t" + 
			"House-7, Road-5, Block-I,\t" + 
			"Banani, Dhaka-1213\t");
	
	
	File currentFolder=new File("C:\\Users\\Omnia\\Google Drive\\Invoice\\Invoice "+carrierName+" (1)\\Invoice "+carrierName+" 2018\\"+carrierName+" "+startDateFinalString+"-"+endDateFinalString);
	File[] listOfcurrentFolder = currentFolder.listFiles();
	int numberInsidecurrentFolder = listOfcurrentFolder.length;
	
	for (int currentFolderIndex = 0; currentFolderIndex < numberInsidecurrentFolder; currentFolderIndex++) {

		File fileToCheck = listOfcurrentFolder[currentFolderIndex];
		String fileName = fileToCheck.getName();

		if (fileName.endsWith("x")) {
			
			inStream = new FileInputStream(
					"C:\\Users\\Omnia\\Google Drive\\Invoice\\Invoice "+carrierName+" (1)\\Invoice "+carrierName+" 2018\\"+carrierName+" "+startDateFinalString+"-"+endDateFinalString+"\\"+fileName);
			
		}
	}
	
	outStream = new FileOutputStream(
			"C:\\Users\\Omnia\\Google Drive\\Invoice\\Invoice "+carrierName+" (1)\\Invoice "+carrierName+" 2018\\"+carrierName+" "+startDateFinalString+"-"+endDateFinalString+"\\Invoice "+carrierName+" "+startDateFinalString+"-"+endDateFinalString+".xls");
	
	
	CDR_SOA_Instream = new FileInputStream(
			"C:\\Users\\Omnia\\Google Drive\\Invoice\\Invoice "+carrierName+" (1)\\Invoice "+carrierName+" 2018\\"+carrierName+" "+startDateFinalString+"-"+endDateFinalString+"\\CDR_SOA "+carrierName+" "+startDateFinalString+"-"+endDateFinalString+".xls");
	
	
	
}


	public static HSSFCellStyle constructHSSFCellStyle(HSSFWorkbook wb,int borderStyle,boolean bold,short fontHeight)
	{
		
		HorizontalAlignment h = HorizontalAlignment.CENTER;
		VerticalAlignment v = VerticalAlignment.CENTER;
		
		
		HSSFCellStyle newStyle = wb.createCellStyle();
		BorderStyle border=null;
		if(borderStyle==1)border=BorderStyle.THIN;
		else if(borderStyle==2)border=BorderStyle.MEDIUM;
		else if(borderStyle==3)border=BorderStyle.THICK;
		
		newStyle.setAlignment(h);
		newStyle.setVerticalAlignment(v);
		
		HSSFFont font = wb.createFont();
		font.setBold(bold);
		font.setFontHeightInPoints((short) fontHeight);
		
		newStyle.setFont(font);
		newStyle.setWrapText(true);
		
		if(borderStyle!=0)
		{
			newStyle.setBorderBottom(border);
			newStyle.setBorderLeft(border);
			newStyle.setBorderRight(border);
			newStyle.setBorderTop(border);
		}
		
		return newStyle;
		
	}
	
	public static HSSFCellStyle constructHSSFCellStyleForSignature(HSSFWorkbook wb,int borderStyle,boolean bold,short fontHeight)
	{
		
		HorizontalAlignment h = HorizontalAlignment.CENTER;
		VerticalAlignment v = VerticalAlignment.CENTER;
		
		
		HSSFCellStyle newStyle = wb.createCellStyle();
		BorderStyle border=null;
		if(borderStyle==1)border=BorderStyle.THIN;
		else if(borderStyle==2)border=BorderStyle.MEDIUM;
		else if(borderStyle==3)border=BorderStyle.THICK;
		
		newStyle.setAlignment(h);
		newStyle.setVerticalAlignment(v);
		
		HSSFFont font = wb.createFont();
		font.setBold(bold);
		font.setFontHeightInPoints((short) fontHeight);
		
		newStyle.setFont(font);
		newStyle.setWrapText(true);
		
		if(borderStyle!=0)
		{
			newStyle.setBorderBottom(border);
		}
		
		return newStyle;
		
	}
	
	public static void setCellStyle(HSSFSheet sheet,int row1,int row2,int col1,int col2,HSSFWorkbook wb,int borderStyle,boolean bold,int fontHeight)
	{
		HSSFRow row;
		HSSFCell cell;
		if(row1!=row2||col1!=col2)sheet.addMergedRegion(new CellRangeAddress(row1,row2,col1,col2));
		for(int irow=row1;irow<=row2;irow++)
		{
			row = sheet.getRow(irow);
			for(int icol=col1;icol<=col2;icol++)
			{
				cell = row.getCell(icol);
				cell.setCellStyle(constructHSSFCellStyle(wb,borderStyle,bold,(short) fontHeight));
			
			}
		}
	}
	
	public static void setCellStyleForSignature(HSSFSheet sheet,int row1,int row2,int col1,int col2,HSSFWorkbook wb,int borderStyle,boolean bold,int fontHeight)
	{
		HSSFRow row;
		HSSFCell cell;
		if(row1!=row2||col1!=col2)sheet.addMergedRegion(new CellRangeAddress(row1,row2,col1,col2));
		for(int irow=row1;irow<=row2;irow++)
		{
			row = sheet.getRow(irow);
			for(int icol=col1;icol<=col2;icol++)
			{
				cell = row.getCell(icol);
				cell.setCellStyle(constructHSSFCellStyleForSignature(wb,borderStyle,bold,(short) fontHeight));
			
			}
		}
	}
	
	
	public static double convertCommaandBrackettoNumber(String commaBracket)
	{
		double result=0.0;
		commaBracket = commaBracket.replaceAll(",", "");
		if(commaBracket.indexOf("(")!=-1) commaBracket= "-"+commaBracket.substring(1, commaBracket.length()-1);
		if (!commaBracket.equals(""))
			result = Double.parseDouble(commaBracket);
				
		return result;
	}
	
	public static String convertNumbertoCommaBracket(double number)
	{
		String result;
		DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
		result = decimalFormat.format(number);
		if(number<0)result="("+result.substring(1)+")";
		return result;
	}

	
	public static void readXLSXFile() throws IOException {
	
		
		
		discountIvoco = 1;

		int MILLIS_IN_DAY = 1000 * 60 * 60 * 24;

		HSSFWorkbook wb_old = new HSSFWorkbook(CDR_SOA_Instream);
		HSSFSheet sheet_CDR = wb_old.getSheetAt(0);
		HSSFSheet sheet_SOA = wb_old.getSheetAt(1);
		
		XSSFWorkbook portal = new XSSFWorkbook(inStream);
		XSSFSheet sheet_Portal = portal.getSheetAt(0);

//		XSSFWorkbook wbx = new XSSFWorkbook(inStream);
//		XSSFSheet sheetx = wbx.getSheetAt(0);

		String sheetName = "Invoice";// name of sheet

		HSSFWorkbook wb = new HSSFWorkbook();
		HSSFSheet sheet = wb.createSheet(sheetName);

		HSSFRow row;
		HSSFCell cell;
		
		HSSFRow rowIn;
		HSSFCell cellIn;
		
		
//		int rowCount = sheetx.getPhysicalNumberOfRows();

		for (int r = 0; r < 80; r++) {
			row = sheet.createRow(r);
			for (int c = 0; c < 15; c++) {
				cell = row.createCell(c);
			}
		}

		// ------------------display logo on CDR------------------------------------

		sheet.addMergedRegion(new CellRangeAddress(0, 1, 5, 6));

		/* Read input PNG / JPG Image into FileInputStream Object */
		InputStream my_banner_image = new FileInputStream("logo.PNG");
		/* Convert picture to be added into a byte array */
		byte[] bytes = IOUtils.toByteArray(my_banner_image);
		/* Add Picture to Workbook, Specify picture type as PNG and Get an Index */
		int my_picture_id = wb.addPicture(bytes, Workbook.PICTURE_TYPE_PNG);
		/* Close the InputStream. We are ready to attach the image to workbook now */
		my_banner_image.close();
		/* Create the drawing container */
		HSSFPatriarch drawing = sheet.createDrawingPatriarch();
		/* Create an anchor point */
		HSSFClientAnchor my_anchor = new HSSFClientAnchor();
		/* Define top left corner, and we can resize picture suitable from there */
		my_anchor.setCol1(5);
		my_anchor.setRow1(0);
		/* Invoke createPicture and pass the anchor point and ID */
		HSSFPicture my_picture = drawing.createPicture(my_anchor, my_picture_id);
		/* Call resize method, which resizes the image */
		my_picture.resize();

		// -----------------------------------------------------------------------------------------------

		
		
		//sheet.addMergedRegion(new CellRangeAddress(3, 4, 6, 8));
		row = sheet.getRow(2);
		cell = row.getCell(6);
		cell.setCellStyle(constructHSSFCellStyle(wb,3,true,(short) 10));
		cell.setCellValue("Invoice");
		
		
		row = sheet.getRow(4);
		cell = row.getCell(0);
		cell.setCellStyle(constructHSSFCellStyle(wb,1,true,(short) 8));
		cell.setCellValue("Invoice To:");
		
		cell = row.getCell(7);
		cell.setCellValue("Invoice No:");
		setCellStyle(sheet, 4, 4, 7, 8, wb, 1, true, 8);

		
		sheet.addMergedRegion(new CellRangeAddress(4, 4, 9, 12));
		cell = row.getCell(9);
		cell.setCellStyle(constructHSSFCellStyle(wb,0,false,(short) 10));
		rowIn=sheet_SOA.getRow(sheet_SOA.getLastRowNum()-1);
		cellIn=rowIn.getCell(1);		
		DataFormatter formatter = new DataFormatter(); // creating formatter using the default locale
		String cellValue = formatter.formatCellValue(cellIn);
		cell.setCellValue(cellValue);
		
		row = sheet.getRow(5);
		cell = row.getCell(0);
		cell.setCellStyle(constructHSSFCellStyle(wb,1,false,(short) 10));
		cell.setCellValue("Client:");
		
		sheet.addMergedRegion(new CellRangeAddress(5, 5, 1, 5));
		row = sheet.getRow(5);
		cell = row.getCell(1);
		cell.setCellValue(carrierName);
		
		cell = row.getCell(7);
		cell.setCellValue("Invoice Date:");
		setCellStyle(sheet,5, 5, 7, 8,wb,1,true,8);
		
		
		sheet.addMergedRegion(new CellRangeAddress(5, 5, 9, 12));
		cell = row.getCell(9);
		cell.setCellStyle(constructHSSFCellStyle(wb,0,false,(short) 10));
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMMM yyyy");
		Date today = new Date();
		String todayString = dateFormat.format(today.getTime());
		cell.setCellValue(todayString);
		
		row = sheet.getRow(6);
		cell = row.getCell(0);
		cell.setCellStyle(constructHSSFCellStyle(wb,1,false,(short) 10));
		cell.setCellValue("Address:");
		
		setCellStyle(sheet,6, 8, 1, 5,wb,1,false, 10);
		cell = row.getCell(1);
		cell.setCellValue(addressMap.get(carrierName));
		
		setCellStyle(sheet,6, 6, 7, 9,wb,2,true,8);
		row = sheet.getRow(6);
		cell = row.getCell(7);
		cell.setCellValue("Mode of Payment");
		
		sheet.addMergedRegion(new CellRangeAddress(7, 7, 7, 9));
		sheet.addMergedRegion(new CellRangeAddress(8, 8, 7, 9));
		
		row = sheet.getRow(7);
		cell = row.getCell(7);
		cell.setCellValue("Currency: USD");
		row = sheet.getRow(8);
		cell = row.getCell(7);
		cell.setCellValue("CPL VAT Reg. No:");
		
		setCellStyle(sheet,9,9, 0, 2,wb,1,true, 10);
		row = sheet.getRow(9);
		cell = row.getCell(0);
		cell.setCellValue("Invoice Summary:");
		
		setCellStyle(sheet,9,9, 7, 8,wb,1,true, 8);
		cell = row.getCell(7);
		cell.setCellValue("Invoice Period:");
		
		setCellStyle(sheet,9,9, 9, 12,wb,0,true, 10);
		cell = row.getCell(9);
		cell.setCellValue(startDateFinalString+"-"+endDateFinalString);
		
		int numberOfRows=sheet_Portal.getLastRowNum()-1;
		String totalMinute="";
		String amount="";
		
		row = sheet_CDR.getRow(7+numberOfRows);
		cell = row.getCell(5);
		String rate=cell.getStringCellValue();
		
		row = sheet_CDR.getRow(8+numberOfRows);
		cell = row.getCell(4);
		totalMinute=cell.getStringCellValue();
		
		cell = row.getCell(6);
		amount=cell.getStringCellValue();
		
		int lastRowofLastSOA=sheet_SOA.getLastRowNum()-2;
		
		double receivedAmountDouble=0;
		
		while(true)
		{
			row = sheet_SOA.getRow(lastRowofLastSOA);
			cell=row.getCell(1);
			cellValue=cell.getStringCellValue();
			if(cellValue.equals("Received")|| cellValue.equals("Credit Note"))
				{
					HSSFCell receivedAmountCell=row.getCell(4);
					String receivedAmountCellValue=receivedAmountCell.getStringCellValue();
					double receivedOnThisDay=Double.parseDouble(receivedAmountCellValue);
					receivedAmountDouble+=receivedOnThisDay;
					lastRowofLastSOA--;
				}
			else break;
		}
		row = sheet_SOA.getRow(lastRowofLastSOA);
		cell = row.getCell(5);
		String lastTotalAmount=cell.getStringCellValue();
		String receivedAmount=convertNumbertoCommaBracket(receivedAmountDouble);
		String netDueBalance;
		String totalBalance;
		
		double lastTotalAmountDouble=convertCommaandBrackettoNumber(lastTotalAmount);		
		double currentWeekAmount=convertCommaandBrackettoNumber(amount);		
		double totalBalanceDouble=lastTotalAmountDouble+currentWeekAmount;		
		double netDueBalanceDouble=totalBalanceDouble-receivedAmountDouble;
		
		totalBalance=convertNumbertoCommaBracket(totalBalanceDouble);
		receivedAmount=convertNumbertoCommaBracket(receivedAmountDouble);
		netDueBalance=convertNumbertoCommaBracket(netDueBalanceDouble);
		
		String moneyAsWords = getMoneyIntoWords(netDueBalanceDouble);
		
		//-----------------------here starts the table-----------------------------------------------------
		
		setCellStyle(sheet,10,10,0,3,wb,1,true, 8);
		row = sheet.getRow(10);
		cell = row.getCell(0);
		cell.setCellValue("Services");
		
		setCellStyle(sheet,10,10,4,4,wb,1,true, 8);
		cell = row.getCell(4);
		cell.setCellValue("Si. No.");
		
		setCellStyle(sheet,10,10,5,7,wb,1,true, 8);
		cell = row.getCell(5);
		cell.setCellValue("Period");
		
		setCellStyle(sheet,10,10,8,9,wb,1,true, 8);
		cell = row.getCell(8);
		cell.setCellValue("Paid Minutes");
		
		setCellStyle(sheet,10,10,10,10,wb,1,true, 8);
		cell = row.getCell(10);
		cell.setCellValue("Rate/min  (USD)");
		
		setCellStyle(sheet,10,10,11,12,wb,1,true, 8);
		cell = row.getCell(11);
		cell.setCellValue("Total Amount(USD)");
		
		int rowIndex=0;
		
		setCellStyle(sheet,11,12, 0, 3,wb,1,false, 10);
		row = sheet.getRow(11);
		cell = row.getCell(0);
		cell.setCellValue("Intl. Incoming calls towards Bangladesh");
		
		setCellStyle(sheet,11,12, 4, 4,wb,1,false, 10);
		cell = row.getCell(4);
		cell.setCellValue("1");
		
		setCellStyle(sheet,11,12, 5, 7,wb,1,false, 10);
		cell = row.getCell(5);
		cell.setCellValue(startDateFinalString+"-"+endDateFinalString);
		
		setCellStyle(sheet,11,12,8,9,wb,1,false, 10);
		cell = row.getCell(8);
		cell.setCellValue(totalMinute);	
		
		setCellStyle(sheet,11,12,10,10,wb,1,false, 10);
		cell = row.getCell(10);
		cell.setCellValue(rate);
		
		setCellStyle(sheet,11,12,11,12,wb,1,false, 10);
		cell = row.getCell(11);
		cell.setCellValue(amount);
		
		rowIndex++;
		
		setCellStyle(sheet,11+rowIndex*2,11+rowIndex*2,10,10,wb,1,true, 10);
		row = sheet.getRow(13);
		cell = row.getCell(10);
		cell.setCellValue("Total");
		
		setCellStyle(sheet,11+rowIndex*2,11+rowIndex*2,11,12,wb,1,true, 10);
		row = sheet.getRow(13);
		cell = row.getCell(11);
		cell.setCellValue(amount);
		
		//----------------------------------table ends--------------------------------------------------
		
		int currentRowIndex=12+rowIndex*2;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,3,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Account Summary :");
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,3,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Balance:");
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,9,wb,2,true, 10);
		cell = row.getCell(4);
		cell.setCellValue("Total USD :");
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,3,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Current Invoice Amount :");
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,9,wb,2,true, 10);
		cell = row.getCell(4);
		cell.setCellValue(amount);
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,3,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Previous Balance :");
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,9,wb,2,true, 10);
		cell = row.getCell(4);
		cell.setCellValue(lastTotalAmount);
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,3,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Total Balance :");
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,9,wb,2,true, 10);
		cell = row.getCell(4);
		cell.setCellValue(totalBalance);
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,3,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Total Adjustment :");
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,9,wb,2,true, 10);
		cell = row.getCell(4);
		cell.setCellValue(receivedAmount);
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,3,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Net Due Balance :");
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,9,wb,2,true, 10);
		cell = row.getCell(4);
		cell.setCellValue(netDueBalance);
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex+1,0,9,wb,2,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Amount in words: "+moneyAsWords);
		currentRowIndex+=2;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,0,0,wb,2,true, 12);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(0);
		cell.setCellValue("Notes:");
		currentRowIndex+=1;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,1,6,wb,0,false, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(1);
		cell.setCellValue("1. Please pay in favor of “Platinum Communications Ltd.");
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,1,3,wb,0,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(1);
		cell.setCellValue("2. Bank Details:");
		
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,12,wb,0,false, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(4);
		cell.setCellValue("a) Bank Name: Prime Bank Ltd., Branch: - Mohakhali, A/C No: - 11051180027298");
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex,4,12,wb,0,false, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(4);
		cell.setCellValue("b) Bank Name: Brac Bank Ltd.., Branch: - Gulshan, A/C No: - 1501202600679001");
		currentRowIndex+=6;
		
		setCellStyleForSignature(sheet,currentRowIndex,currentRowIndex,1,3,wb,3,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(1);
		cell.setCellValue("");
		
		setCellStyleForSignature(sheet,currentRowIndex,currentRowIndex,8,10,wb,3,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(8);
		cell.setCellValue("");
		currentRowIndex++;
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex+1,1,3,wb,0,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(1);
		cell.setCellValue("Head of Department              Billing & Rev.Assurance");
		
		setCellStyle(sheet,currentRowIndex,currentRowIndex+1,8,10,wb,0,true, 10);
		row = sheet.getRow(currentRowIndex);
		cell = row.getCell(8);
		cell.setCellValue("Head of Department              Finance & Accounts");
		
		
		int lastRow=42;
		setCellStyle(sheet,lastRow,lastRow+1,0,12,wb,0,false, 6);
		row = sheet.getRow(lastRow);
		cell = row.getCell(0);
		cell.setCellValue("Corporate Office: 82 Mohakhali C/A (2nd Floor), Dhaka - 1212, Bangladesh, Tel: +88 02 9853459, 9853473, Fax: +88 02 8814537\r\n" + 
				"E-mail: infoplatinumgw.com, Web: www.platinumgw.com\r\n" + 
				"");
		
		
//		sheet.addMergedRegion(new CellRangeAddress(4, 4, 0, 6));
//		row = sheet.getRow(4);
//		cell = row.getCell(0);
//		cell.setCellStyle(newStyleAddress);
//		cell.setCellValue("Routed by Platinum Communications Ltd.");
//
//		sheet.addMergedRegion(new CellRangeAddress(5, 5, 0, 6));
//		row = sheet.getRow(5);
//		cell = row.getCell(0);
//		cell.setCellStyle(newStyleAddress);
//		cell.setCellValue("For the period of " + startDateFinalString + "-" + endDateFinalString);
//
//		row = sheet.createRow(6);
//		for (int c = 0; c < 7; c++) {
//			cell = row.createCell(c);
//		}
//		sheet.addMergedRegion(new CellRangeAddress(6, 6, 0, 6));
//
//		row = sheet.createRow(7);
//		for (int c = 0; c < 7; c++) {
//			cell = row.createCell(c);
//		}
//
//		String[] stringsAtRow7 = { "Si No", "From", "Duration", "International Carrier", "Paid Minutes", "Rates(USD)",
//				"Total Amount(USD)" };
//
//		row = sheet.getRow(7);
//		for (int c = 0; c < 7; c++) {
//			cell = row.getCell(c);
//
//			cell.setCellStyle(newStyleMediumBorder);
//			cell.setCellValue(stringsAtRow7[c]);
//		}
//
//		List<String> carrierCostString = new ArrayList<String>();
//		double totalCarrierDuration = 0.0;
//		double totalTempUSD = 0.0;
//
//		DecimalFormat decimalFormat = new DecimalFormat("#,##0.00");
//
//		for (int r = 0; r < rowCount - 2; r++) {
//
//			rowx = sheetx.getRow(r + 1);
//			row = sheet.createRow(r + 8);
//
//			int columnCount = rowx.getPhysicalNumberOfCells();
//			// iterating c number of columns
//			for (int c = 0; c < columnCount; c++) {
//				cell = row.createCell(c);
//			}
//
//			cell = row.getCell(0);
//			cell.setCellStyle(newStyleSmallBorder);
//			cell.setCellValue(r + 1);
//
//			cell = row.getCell(2);
//			cell.setCellStyle(newStyleSmallBorder);
//			cell.setCellValue("24 Hrs");
//
//			cellx = rowx.getCell(0);
//			cellx = (XSSFCell) cellx;
//			cell = row.getCell(1);
//			cell.setCellStyle(newStyleSmallBorder);
//
//			DataFormatter formatter = new DataFormatter(); // creating formatter using the default locale
//			String cellValue = cellx.getStringCellValue();
//			String dateValue = cellValue;
//			cell.setCellValue(cellValue);
//
//			cellx = rowx.getCell(1);
//			cellx = (XSSFCell) cellx;
//			cell = row.getCell(3);
//			cell.setCellStyle(newStyleSmallBorder);
//
//			formatter = new DataFormatter(); // creating formatter using the default locale
//			cellValue = formatter.formatCellValue(cellx);
//			cell.setCellValue(cellValue);
//
//			cellx = rowx.getCell(7);
//			cellx = (XSSFCell) cellx;
//			cell = row.getCell(4);
//			cell.setCellStyle(newStyleSmallBorder);
//
//			formatter = new DataFormatter(); // creating formatter using the default locale
//			cellValue = formatter.formatCellValue(cellx);
//			totalCarrierDuration += Double.parseDouble(cellValue.replaceAll(",", ""));
//			double dailyTempUSD = Double.parseDouble(cellValue.replaceAll(",", "")) * 0.0240;
//			totalTempUSD += dailyTempUSD;
//
//			cell.setCellValue(cellValue);
//
//			if (dateValue != null) {
//				cell = row.getCell(5);
//				cell.setCellStyle(newStyleSmallBorder);
//				if (carrierName.equals("Ivoco") && discountIvoco == 1)
//					cell.setCellValue("0.0240");
//				else
//					cell.setCellValue(dateRateMap.get(dateValue).toString());
//
//			}
//
//			cellx = rowx.getCell(11);
//			cellx = (XSSFCell) cellx;
//			cell = row.getCell(6);
//			cell.setCellStyle(newStyleSmallBorder);
//
//			formatter = new DataFormatter(); // creating formatter using the default locale
//
//			if (carrierName.equals("Ivoco") && discountIvoco == 1) {
//				cellValue = Double.toString(dailyTempUSD);
//			}
//
//			else
//				cellValue = formatter.formatCellValue(cellx);
//
//			carrierCostString.add(cellValue);
//			if (r < rowCount - 2)
//				cell.setCellValue(Math.round((Double.parseDouble(cellValue)) * 100.0) / 100.0);
//
//		}
//
//		double totalCarrierCost = 0;
//		int totalRow = carrierCostString.size() - 1;
//		for (int costIndex = 0; costIndex <= totalRow; costIndex++) {
//			totalCarrierCost += Double.parseDouble(carrierCostString.get(costIndex));
//		}
//
//		for (int c = 0; c < 7; c++) {
//			int maxNumCharacters = 0;
//			int numberOfRows = sheet.getLastRowNum() - sheet.getFirstRowNum();
//			for (int r = 7; r < numberOfRows; r++) {
//				row = sheet.getRow(r);
//				cell = row.getCell(c);
//
//				DataFormatter formatter = new DataFormatter(); // creating formatter using the default locale
//
//				String cellValue = formatter.formatCellValue(cell);
//				maxNumCharacters = Math.max(maxNumCharacters, cellValue.length());
//			}
//
//			int width = ((int) (maxNumCharacters * 1.4)) * 256;
//			sheet.setColumnWidth(c, width);
//		}
//
//		row = sheet.createRow(8 + rowCount - 2);
//		sheet.addMergedRegion(new CellRangeAddress(8 + rowCount - 2, 8 + rowCount - 2, 0, 3));
//		row = sheet.getRow(8 + rowCount - 2);
//		for (int c = 0; c < 7; c++) {
//			cell = row.createCell(c);
//		}
//
//		cell = row.getCell(0);
//		cell.setCellStyle(newStyleMediumBorder);
//		cell.setCellValue("Total");
//
//		cell = row.getCell(4);
//		cell.setCellStyle(newStyleMediumBorder);
//
//		String cellValueCDR = decimalFormat.format(totalCarrierDuration);
//		cell.setCellValue(cellValueCDR);
//
//		for (int i = 1; i < 6; i++) {
//			if (i == 5)
//				continue;
//			cell = row.getCell(i);
//			cell.setCellStyle(newStyleMediumBorder);
//		}
//
//		cell = row.getCell(6);
//		cell.setCellStyle(newStyleMediumBorder);
//		cellValueCDR = decimalFormat.format(totalCarrierCost);
//		cell.setCellValue(cellValueCDR);
//
//		for (int r = 21; r < 30; r++) {
//			row = sheet.createRow(r);
//			for (int c = 0; c < 7; c++) {
//				row.createCell(c);
//			}
//		}
//
//		sheet.addMergedRegion(new CellRangeAddress(21, 21, 2, 3));
//		sheet.addMergedRegion(new CellRangeAddress(21, 21, 5, 6));
//		sheet.addMergedRegion(new CellRangeAddress(22, 22, 2, 3));
//		sheet.addMergedRegion(new CellRangeAddress(22, 22, 5, 6));
//		sheet.addMergedRegion(new CellRangeAddress(27, 27, 3, 4));
//		sheet.addMergedRegion(new CellRangeAddress(28, 28, 3, 4));
//
//		row = sheet.getRow(22);
//		cell = row.getCell(2);
//		cell.setCellStyle(newStyleUpperBorder);
//		cell.setCellValue("Authorized by (Head Billing. Dept)");
//
//		cell = row.getCell(3);
//		cell.setCellStyle(newStyleUpperBorder);
//
//		cell = row.getCell(5);
//		cell.setCellStyle(newStyleUpperBorder);
//		cell.setCellValue("Checked by Billing Dept");
//
//		cell = row.getCell(6);
//		cell.setCellStyle(newStyleUpperBorder);
//
//		row = sheet.getRow(28);
//		cell = row.getCell(3);
//		cell.setCellStyle(newStyleUpperBorder);
//		cell.setCellValue("Generated by Mrinal Deb Nath");
//
//		cell = row.getCell(4);
//		cell.setCellStyle(newStyleUpperBorder);

		wb.write(outStream);

//		// =============================== here starts the code for SOA
//		// ================================================
//
//		outStream = new FileOutputStream(
//				"C:\\Users\\Omnia\\Google Drive\\Invoice\\Invoice " + carrierName + " (1)\\Invoice " + carrierName
//						+ " 2018\\" + carrierName + " " + startDateFinalString + "-" + endDateFinalString + "\\CDR_SOA "
//						+ carrierName + " " + startDateFinalString + "-" + endDateFinalString + ".xls");
//		int fCell = 0;
//		int lCell = 0;
//		int fRow = 0;
//		int lRow = 0;
//		HSSFSheet mySheet = null;
//		HSSFRow myRow = null;
//		HSSFCell myCell = null;
//
//		mySheet = wb.createSheet(sheet_SOA.getSheetName());
//
//		for (int r = 0; r < 4; r++) {
//			row = mySheet.createRow(r);
//			for (int c = 0; c < 10; c++) {
//				cell = row.createCell(c);
//			}
//			mySheet.addMergedRegion(new CellRangeAddress(r, r, 0, 5));
//		}
//
//		// ------------------display logo on SOA------------------------------------
//
//		mySheet.addMergedRegion(new CellRangeAddress(2, 2, 6, 7));
//
//		/* Read input PNG / JPG Image into FileInputStream Object */
//		// InputStream my_banner_image = new FileInputStream("logo.PNG");
//		/* Convert picture to be added into a byte array */
//		// byte[] bytes = IOUtils.toByteArray(my_banner_image);
//		/* Add Picture to Workbook, Specify picture type as PNG and Get an Index */
//		// int my_picture_id = wb.addPicture(bytes, Workbook.PICTURE_TYPE_PNG);
//		/* Close the InputStream. We are ready to attach the image to workbook now */
//		// my_banner_image.close();
//		/* Create the drawing container */
//		HSSFPatriarch drawing_SOA = mySheet.createDrawingPatriarch();
//		/* Create an anchor point */
//		// XSSFClientAnchor my_anchor = new XSSFClientAnchor();
//		/* Define top left corner, and we can resize picture suitable from there */
//		my_anchor.setCol1(6);
//		my_anchor.setRow1(2);
//		/* Invoke createPicture and pass the anchor point and ID */
//		my_picture = drawing_SOA.createPicture(my_anchor, my_picture_id);
//		/* Call resize method, which resizes the image */
//		my_picture.resize();
//
//		// -----------------------------------------------------------------------------------------------
//
//		row = mySheet.getRow(1);
//		cell = row.getCell(0);
//		cell.setCellStyle(newStyleSetFont);
//		cell.setCellValue("Platinum Communications Ltd.");
//
//		row = mySheet.getRow(2);
//		cell = row.getCell(0);
//		cell.setCellStyle(newStyleMediumBold);
//		cell.setCellValue("SOA of " + carrierName + " Pte. Ltd.");
//
//		fRow = sheet_SOA.getFirstRowNum();
//		lRow = sheet_SOA.getLastRowNum();
//
//		String previousString = null;
//		String previousInvoiceInfo = null;
//
//		for (int iRow = 4; iRow < lRow; iRow++) {
//			row = sheet_SOA.getRow(iRow);
//			if (iRow == lRow - 1)
//				System.out.println(row.getCell(1).getStringCellValue());
//			myRow = mySheet.createRow(iRow);
//			if (row != null && !(iRow == 29 && carrierName.equals("PMB"))) {
//				fCell = row.getFirstCellNum();
//				lCell = row.getLastCellNum();
//
//				for (int iCell = fCell; iCell < lCell; iCell++) {
//
//					cell = row.getCell(iCell);
//
//					myCell = myRow.createCell(iCell);
//					if (iRow == 4 || (iRow == 29 && carrierName.equals("PMB")))
//						myCell.setCellStyle(newStyleMediumBorder);
//					else
//						myCell.setCellStyle(newStyleSmallBorder);
//					if (cell != null) {
//
//						if (iRow > 4 && iCell == 0) {
//							myCell.setCellValue(iRow - 4);
//							continue;
//						}
//
//						DataFormatter formatter = new DataFormatter();
//						String cellValue = "0";
//						cellValue = formatter.formatCellValue(cell);
//						myCell.setCellValue(cellValue);
//						if (!(iRow == 4 || (iRow == 29 && carrierName.equals("PMB")))) {
//							if (iCell == 1)
//								previousInvoiceInfo = cellValue;
//							if (iCell == 5)
//								previousString = cellValue;
//						}
//					}
//
//				}
//			}
//		}
//
//		if (carrierName.equals("PMB")) {
//			String[] stringsAtRow29 = { "Si. No", "Invoice No.", "Period", "Invoice Amount USD. ",
//					"Received Amount USD. ", "Balance Amount USD. " };
//
//			row = mySheet.getRow(29);
//			for (int c = 0; c < 6; c++) {
//				cell = row.createCell(c);
//
//				cell.setCellStyle(newStyleMediumBorder);
//				cell.setCellValue(stringsAtRow29[c]);
//			}
//
//		}
//
//		int receivedRow = 0;
//
//		DataFormatter formatter = new DataFormatter();
//
//		if (!receivedMap.containsKey("0")) {
//			for (Map.Entry<String, Double> entry : receivedMap.entrySet()) {
//				double previousDouble = 0;
//				previousString = previousString.replaceAll(",", "");
//				if (previousString.indexOf("(") != -1)
//					previousString = "-" + previousString.substring(1, previousString.length() - 1);
//				if (!previousString.equals(""))
//					previousDouble = Double.parseDouble(previousString);
//
//				previousDouble -= entry.getValue();
//
//				previousString = decimalFormat.format(previousDouble);
//				if (previousDouble < 0)
//					previousString = "(" + previousString.substring(1) + ")";
//
//				String[] columnValuesOfReceivedRow = { Integer.toString(myRow.getRowNum() + 1 - 4), "Received",
//						entry.getKey(), "", Double.toString(entry.getValue()), previousString };
//
//				myRow = mySheet.createRow(myRow.getRowNum() + 1);
//
//				for (int iCell = fCell; iCell < 6; iCell++) {
//					myCell = myRow.createCell(iCell);
//					myCell.setCellStyle(newStyleSmallBorder);
//					myCell.setCellValue(columnValuesOfReceivedRow[iCell]);
//				}
//				receivedRow++;
//			}
//
//		}
//
//		// --------------------code for
//		// discount---------------------------------------------------------
//
//		// if(carrierName.equals("Ivoco") && discountIvoco==1)
//		// {
//		// double previousDouble=0;
//		// previousString = previousString.replaceAll(",", "");
//		// if(previousString.indexOf("(")!=-1) previousString=
//		// "-"+previousString.substring(1, previousString.length()-1);
//		// if (!previousString.equals(""))
//		// previousDouble = Double.parseDouble(previousString);
//		// double discountDollar=totalCarrierCost-24390.0;
//		// double discountMinute=discountDollar/0.025;
//		// previousDouble-=(discountMinute*0.001);
//		// previousString = decimalFormat.format(previousDouble);
//		// String discountValueToString=decimalFormat.format(discountMinute*0.001);
//		// if(previousDouble<0)previousString="("+previousString.substring(1)+")";
//		//
//		// String[] columnValuesOfReceivedRow=
//		// {Integer.toString(myRow.getRowNum()+1-4),"Discount","","",discountValueToString,previousString};
//		//
//		// myRow = mySheet.createRow(myRow.getRowNum()+1);
//		//
//		// for (int iCell = fCell; iCell <6; iCell++) {
//		// myCell = myRow.createCell(iCell);
//		// if(iCell==1)myCell.setCellStyle(newStyleMediumBorder);
//		// else myCell.setCellStyle(newStyleSmallBorder);
//		// myCell.setCellValue(columnValuesOfReceivedRow[iCell]);
//		// }
//		// receivedRow++;
//		//
//		// }
//
//		// ---------------------------code for
//		// discount---------------------------------------------
//
//		Double totalInvoice = 0.0;
//		Double totalReceived = 0.0;
//
//		row = sheet_SOA.getRow(lRow);
//		myRow = mySheet.createRow(mySheet.getLastRowNum() + 1);
//
//		for (int iCell = fCell; iCell < lCell; iCell++) {
//			cell = row.getCell(iCell);
//			myCell = myRow.createCell(iCell);
//			myCell.setCellStyle(newStyleSmallBorder);
//
//			if (iCell == 0) {
//				myCell.setCellValue(myRow.getRowNum() - 4);
//				continue;
//			}
//		}
//
//		myCell = myRow.getCell(1);
//		formatter = new DataFormatter();
//		String invoiceNumberString = previousInvoiceInfo.substring(previousInvoiceInfo.lastIndexOf("/") + 1);
//		int newInvoiceNumber = Integer.parseInt(invoiceNumberString) + 1;
//		myCell.setCellValue(
//				previousInvoiceInfo.substring(0, previousInvoiceInfo.lastIndexOf("/") + 1) + newInvoiceNumber);
//
//		myCell = myRow.getCell(2);
//		myCell.setCellValue(startDateFinalString + " to " + endDateFinalString);
//
//		myCell = myRow.getCell(3);
//		decimalFormat = new DecimalFormat("#,##0.00");
//		String cellValue = decimalFormat.format(totalCarrierCost);
//		myCell.setCellValue(cellValue);
//
//		myCell = myRow.getCell(5);
//		double previousDouble = 0;
//		previousString = previousString.replaceAll(",", "");
//		if (previousString.indexOf("(") != -1)
//			previousString = "-" + previousString.substring(1, previousString.length() - 1);
//		if (!previousString.equals(""))
//			previousDouble = Double.parseDouble(previousString);
//
//		previousDouble += totalCarrierCost;
//		cellValue = decimalFormat.format(previousDouble);
//		if (previousDouble < 0)
//			cellValue = "(" + cellValue.substring(1) + ")";
//		myCell.setCellValue(cellValue);
//
//		for (int iRow = 5; iRow <= mySheet.getLastRowNum(); iRow++) {
//			if (row != null && (iRow == 29 && carrierName.equals("PMB")))
//				continue;
//			myRow = mySheet.getRow(iRow);
//
//			myCell = myRow.getCell(3);
//
//			formatter = new DataFormatter();
//			cellValue = formatter.formatCellValue(myCell);
//			cellValue = cellValue.replaceAll(",", "");
//			if (!cellValue.equals(""))
//				totalInvoice += Double.parseDouble(cellValue);
//		}
//
//		for (int iRow = 5; iRow <= mySheet.getLastRowNum(); iRow++) {
//			if (row != null && (iRow == 29 && carrierName.equals("PMB")))
//				continue;
//			myRow = mySheet.getRow(iRow);
//
//			myCell = myRow.getCell(4);
//
//			formatter = new DataFormatter();
//			cellValue = formatter.formatCellValue(myCell);
//			cellValue = cellValue.replaceAll(",", "");
//			if (!cellValue.equals(""))
//				totalReceived += Double.parseDouble(cellValue);
//		}
//
//		myRow = mySheet.createRow(mySheet.getLastRowNum() + 1);
//
//		for (int c = 0; c < 10; c++) {
//			myRow.createCell(c);
//
//		}
//
//		mySheet.addMergedRegion(new CellRangeAddress(mySheet.getLastRowNum(), mySheet.getLastRowNum(), 0, 2));
//
//		myCell = myRow.getCell(0);
//		myCell.setCellStyle(newStyleMediumBorder);
//		myCell.setCellValue("Total");
//
//		myCell = myRow.getCell(1);
//		myCell.setCellStyle(newStyleMediumBorder);
//		myCell = myRow.getCell(2);
//		myCell.setCellStyle(newStyleMediumBorder);
//
//		myCell = myRow.getCell(3);
//		myCell.setCellStyle(newStyleMediumBorder);
//		decimalFormat = new DecimalFormat("#,##0.00");
//		myCell.setCellValue(decimalFormat.format(totalInvoice));
//
//		myCell = myRow.getCell(4);
//		myCell.setCellStyle(newStyleMediumBorder);
//		decimalFormat = new DecimalFormat("#,##0.00");
//		myCell.setCellValue(decimalFormat.format(totalReceived));
//
//		for (int c = 0; c < 10; c++) {
//			mySheet.autoSizeColumn(c);
//		}
//
//		wb.write(outStream);

	}

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		

		
		String[] carrierList= {"Carrier-1"};
		int numberOfCarrier=carrierList.length;
		
		for(int i=0;i<numberOfCarrier;i++) {
			carrierName=carrierList[i];
			discountIvoco=0;
			
			
			try {
				GenerateDoc.setDate();
				
				GenerateDoc.setInOutLastDate();
				
				GenerateDoc.readXLSXFile();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			try {
				outStream.flush();
				outStream.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}


}
